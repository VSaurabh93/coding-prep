{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","footer","loader","position","left","top","transform","tags","marginLeft","App","classes","useState","data","_setData","rows","_setRows","tag","setTag","isLoading","setIsLoading","updateRows","filter","entry","includes","useEffect","fetch","then","res","ok","Error","arrayBuffer","ab","respArr","Uint8Array","workbook","XLSX","read","type","setData","Sheets","Algos","sheet","i","v","replace","split","push","CircularProgress","className","size","Fragment","CssBaseline","AppBar","color","href","target","Container","maxWidth","Typography","component","variant","align","gutterBottom","paragraph","Select","labelId","id","value","autoWidth","onChange","event","MenuItem","map","key","Link","onClick","style","whiteSpace","language","docco","wrapLines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8f4694e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport GitHubForkRibbon from 'react-github-fork-ribbon'; \nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  loader: {\n    position: 'absolute', left: '50%', top: '40%',\n    transform: 'translate(-50%, -50%)',\n  },\n  tags: {\n    '& > * + *': {\n      marginLeft: theme.spacing(1),\n    },\n  }\n}));\n  \nexport default function App() {\n  const classes = useStyles();\n\n  const [ data, _setData ] = useState([]);\n  const [ rows, _setRows ] = useState([]);\n  const [ tag, setTag ] = useState('all');\n  const [ isLoading, setIsLoading ] = useState(true);\n\n  const handleChange = (event) => {\n    updateRows(event.target.value);\n  };\n\n  const updateRows = (tag) => {\n    setTag(tag);\n    if (tag === 'all') {\n      _setRows(data);\n    } else {\n      _setRows(data.filter(entry => entry['tags'].includes(tag)));\n    }\n  };\n\n  useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/kunwardeeps/coding-prep/master/Leetcode_Approach.xlsx\";\n    fetch(url).then(function(res) {\n      if(!res.ok) throw new Error(\"fetch failed\");\n      return res.arrayBuffer();\n    }).then(ab => {\n      const respArr = new Uint8Array(ab);\n      const workbook = XLSX.read(respArr, {type:\"array\"});\n      setData(workbook.Sheets.Algos);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const setData = (sheet) => {\n    let data = [];\n    for (let i = 2; sheet['A' + i]; i++) {\n      let entry = {};\n      entry['title'] = sheet['A' + i].v;\n      entry['source'] = sheet['B' + i] && sheet['B' + i].v;\n      entry['tags'] = sheet['C' + i] && sheet['C' + i].v.replace(/\\s+/g, '').split(',');\n      entry['approach'] = sheet['D' + i] && sheet['D' + i].v;\n      entry['code'] = sheet['E' + i] && sheet['E' + i].v;\n      data.push(entry);\n    }\n    _setData(data);\n    _setRows(data);\n  }\n\n  const getTagLinks = (tags) => {\n    return tags.map((tag, i) => \n      <Link key={i} onClick={() => updateRows(tag)} href='#'>{tag}\n      </Link>);\n  }\n  \n  return (\n    isLoading? <CircularProgress className={classes.loader} size={200}/> :\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <GitHubForkRibbon position=\"right\" \n                          color=\"green\"\n                          href=\"//github.com/kunwardeeps/coding-prep\" \n                          target=\"_blank\" > \n          Fork me on GitHub \n        </GitHubForkRibbon> \n      </AppBar>\n      <main>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"md\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Coding Interview Prep\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              A compilation of frequently asked coding questions.\n            </Typography>\n            <div align=\"center\">\n              <Select\n                labelId=\"select-tag-label\"\n                id=\"select-tag\"\n                value={tag}\n                autoWidth={true}\n                onChange={handleChange}> \n                <MenuItem value={'all'}>All</MenuItem>\n                <MenuItem value={'arrays'}>Arrays</MenuItem>\n                <MenuItem value={'backtracking'}>Backtracking</MenuItem>\n                <MenuItem value={'bfs'}>BFS</MenuItem>\n                <MenuItem value={'binary_search'}>Binary Search</MenuItem>\n                <MenuItem value={'bit_manipulation'}>Bit Manipulation</MenuItem>\n                <MenuItem value={'dfs'}>DFS</MenuItem>\n                <MenuItem value={'dp'}>Dynamic Programming</MenuItem>\n                <MenuItem value={'graph'}>Graph</MenuItem>\n                <MenuItem value={'greedy'}>Greedy</MenuItem>\n                <MenuItem value={'heap'}>Heap</MenuItem>\n                <MenuItem value={'intervals'}>Intervals</MenuItem>\n                <MenuItem value={'linked_list'}>Linked List</MenuItem>\n                <MenuItem value={'search'}>Search</MenuItem>\n                <MenuItem value={'sliding_window'}>Sliding Window</MenuItem>\n                <MenuItem value={'sort'}>Sort</MenuItem>\n                <MenuItem value={'string'}>String</MenuItem>\n                <MenuItem value={'topological_sort'}>Topological Sort</MenuItem>\n                <MenuItem value={'trie'}>Trie</MenuItem>\n                <MenuItem value={'two_pointers'}>Two Pointers</MenuItem>\n                <MenuItem value={'union_find'}>Union Find</MenuItem>\n              </Select>\n            </div>\n          </Container>\n          {rows.map((entry, i) => \n          <div key={i}>\n            <Container maxWidth=\"lg\">\n              <span>&nbsp;&nbsp;</span>\n              <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\n                {entry['title']}\n              </Typography>\n              {entry['source'] && \n              <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" paragraph>\n                <Link href={entry['source']}>Source</Link>\n              </Typography>}\n              <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" paragraph>\n                <span>Tags: </span>\n                <span className={classes.tags}>\n                  {getTagLinks(entry['tags'])}\n                </span>\n              </Typography>\n              {entry['approach'] &&\n              <div className=\"approach\">\n                <Typography variant=\"h5\" align=\"left\" color=\"textPrimary\" gutterBottom>\n                  Approach\n                </Typography>\n                <Typography style={{ whiteSpace: 'pre-wrap' }} variant=\"body2\" align=\"left\" color=\"textPrimary\" gutterBottom>\n                  {entry['approach']}\n                </Typography>\n              </div>}\n              {entry['code'] && \n              <SyntaxHighlighter language=\"java\" style={docco} wrapLines={true}>\n                {entry['code']}\n              </SyntaxHighlighter>}\n              <span>&nbsp;&nbsp;</span>\n            </Container>\n          </div>)}\n        </div>\n      </main>\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Coding Prep\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Thanks for visiting!\n        </Typography>\n      </footer>\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}