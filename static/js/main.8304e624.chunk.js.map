{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","App","classes","useState","data","setData","isLoading","setIsLoading","useEffect","fetch","then","res","ok","Error","arrayBuffer","ab","Uint8Array","workbook","XLSX","read","type","console","log","Sheets","Algos","Fragment","CssBaseline","AppBar","position","Toolbar","className","Container","maxWidth","component","gutterBottom","paragraph","A2","v","B2","C2","D2","E2","language","style","docco","Grid","container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8304e624.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst columns = ['A', 'B', 'C', 'D', 'E'];\n  \nexport default function App() {\n  const classes = useStyles();\n\n  const [ data, setData ] = useState({});\n\n  const [ isLoading, setIsLoading ] = useState(true);\n\n  useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/kunwardeeps/coding-prep/master/Leetcode_Approach.xlsx\";\n    fetch(url).then(function(res) {\n      /* get the data as a Blob */\n      if(!res.ok) throw new Error(\"fetch failed\");\n      return res.arrayBuffer();\n    }).then(ab => {\n      /* parse the data when it is received */\n      var data = new Uint8Array(ab);\n      var workbook = XLSX.read(data, {type:\"array\"});\n      console.log(workbook.Sheets.Algos);\n      setData(workbook.Sheets.Algos);\n      setIsLoading(false);\n    });\n  }, []);\n  \n  return (\n    isLoading? <div>Loading</div> :\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <Toolbar/>\n      </AppBar>\n      <main>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Coding Prep\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              A compilation of frequently asked coding questions.\n            </Typography>\n          </Container>\n          <Container maxWidth=\"lg\">\n            <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\n              {data.A2.v}\n            </Typography>\n            {data.B2 && <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" paragraph>\n               <a href={data.B2.v}>Source</a>\n            </Typography>}\n            <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" paragraph>\n              Tags: {data.C2.v}\n            </Typography>\n            {data.D2 && \n            <Typography variant=\"h5\" align=\"left\" color=\"textSecondary\" gutterBottom>\n              Approach\n            </Typography> &&\n            <Typography variant=\"body1\" align=\"left\" color=\"textSecondary\" gutterBottom>\n              {data.D2.v}\n            </Typography>}\n            <Typography variant=\"h5\" align=\"left\" color=\"textPrimary\" gutterBottom>\n              Code\n            </Typography>\n            {data.E2 && \n            <SyntaxHighlighter language=\"java\" style={docco}>\n              {data.E2.v}\n            </SyntaxHighlighter>}\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"lg\">\n          <Grid container spacing={4}>\n            \n          </Grid>\n        </Container>\n      </main>\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Something here to give the footer a purpose!\n        </Typography>\n        <Copyright />\n      </footer>\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}