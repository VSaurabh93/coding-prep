{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","footer","loader","position","left","top","transform","App","classes","useState","rows","_setRows","isLoading","setIsLoading","useEffect","fetch","then","res","ok","Error","arrayBuffer","ab","data","Uint8Array","workbook","XLSX","read","type","setRows","Sheets","Algos","i","push","Container","maxWidth","Typography","variant","align","color","gutterBottom","v","paragraph","href","className","split","map","item","key","language","style","docco","wrapLines","height","width","Fragment","CssBaseline","AppBar","target","component","row","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74431b4e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport XLSX from 'xlsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport ReactLoading from 'react-loading';\nimport GitHubForkRibbon from 'react-github-fork-ribbon'; \n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  loader: {\n    position: 'absolute', left: '50%', top: '40%',\n    transform: 'translate(-50%, -50%)',\n  }\n}));\n  \nexport default function App() {\n  const classes = useStyles();\n\n  const [ rows, _setRows ] = useState([]);\n\n  const [ isLoading, setIsLoading ] = useState(true);\n\n  useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/kunwardeeps/coding-prep/master/Leetcode_Approach.xlsx\";\n    fetch(url).then(function(res) {\n      /* get the data as a Blob */\n      if(!res.ok) throw new Error(\"fetch failed\");\n      return res.arrayBuffer();\n    }).then(ab => {\n      /* parse the data when it is received */\n      var data = new Uint8Array(ab);\n      var workbook = XLSX.read(data, {type:\"array\"});\n      //console.log(workbook.Sheets.Algos);\n      setRows(workbook.Sheets.Algos);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const setRows = (data) => {\n    let rows = [];\n    for (let i = 2; data['A' + i]; i++) {\n        rows.push(\n          <Container maxWidth=\"lg\">\n            <span>&nbsp;&nbsp;</span>\n            <Typography variant=\"h3\" align=\"left\" color=\"textPrimary\" gutterBottom>\n              {data['A' + i].v}\n            </Typography>\n            {data['B' + i] && \n            <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" paragraph>\n              <a href={data['B' + i].v}>Source</a>\n            </Typography>}\n            <Typography variant=\"subtitle1\" align=\"left\" color=\"textSecondary\" paragraph>\n              Tags: {data['C' + i].v}\n            </Typography>\n            {data['D' + i] &&\n            <div className=\"approach\">\n              <Typography variant=\"h5\" align=\"left\" color=\"textPrimary\" gutterBottom>\n                Approach\n              </Typography>\n              {data['D' + i].v.split('\\n').map(function(item, key) {\n                return (\n                  <Typography key={key} variant=\"body2\" align=\"left\" color=\"textPrimary\" gutterBottom>\n                    {item}\n                  </Typography>\n                )\n              })}\n            </div>}\n            {data['E' + i] && \n            <SyntaxHighlighter language=\"java\" style={docco} wrapLines={true}>\n              {data['E' + i].v}\n            </SyntaxHighlighter>}\n            <span>&nbsp;&nbsp;</span>\n          </Container>\n        );\n    }\n    _setRows(rows);\n  };  \n  \n  return (\n    isLoading? <ReactLoading className={classes.loader} type='spin' height='20%' width='20%'/> :\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"relative\">\n        <GitHubForkRibbon position=\"right\" \n                          color=\"green\"\n                          href=\"//github.com/kunwardeeps/coding-prep\" \n                          target=\"_blank\" > \n          Fork me on GitHub \n        </GitHubForkRibbon> \n      </AppBar>\n      <main>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"md\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              Coding Interview Prep\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" color=\"textSecondary\" paragraph>\n              A compilation of frequently asked coding questions.\n            </Typography>\n          </Container>\n          {rows.map((row, i) => <div key={i}>{row}</div>)}\n        </div>\n      </main>\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Something here to give the footer a purpose!\n        </Typography>\n      </footer>\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}